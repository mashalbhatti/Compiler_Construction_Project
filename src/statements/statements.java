/* Generated By:JavaCC: Do not edit this line. statements.java */
package statements;
import expression.*;
import supportingpackages.*;
import expression.literal.*;
import expression.arithmetic.*;
import expression.logical.*;
import expression.relational.*;
import statementparser.*;
import java.util.ArrayList;
import java.util.List;

public class statements implements statementsConstants {
  public static void main(String args []) throws ParseException, TokenMgrError, NumberFormatException
  {
    statements parser = new statements(System.in);
    /*    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (statements.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        statements.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    } */
        Statement lastStatement;
  }

//Add concatenation operator 
//Add comments 
  final public Statement Start() throws ParseException {
        Statement s = new EmptyStatement();
    s = multiStatement();
    jj_consume_token(0);
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Statement multiStatement() throws ParseException {
        Statement initial = new EmptyStatement();
        Statement last = initial;
        Statement next = null;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      next = statementParser();
                last.next = next;
                last = next;
    }
                {if (true) return initial;}
    throw new Error("Missing return statement in function");
  }

  final public Statement statementParser() throws ParseException {
   Statement s = null;
    if (jj_2_2(5)) {
      s = arrayStatementParser();
    } else if (jj_2_3(3)) {
      s = initializationParser();
    } else if (jj_2_4(4)) {
      s = declarationParser();
    } else if (jj_2_5(2)) {
      s = inputStatementParser();
    } else if (jj_2_6(2)) {
      s = assignmentParser();
    } else if (jj_2_7(2)) {
      s = ifParser();
    } else if (jj_2_8(2)) {
      s = whileParser();
    } else if (jj_2_9(2)) {
      s = forEachParser();
    } else if (jj_2_10(2)) {
      s = functionDeclarationParser();
    } else if (jj_2_11(2)) {
      s = printStatementParser();
    } else if (jj_2_12(2)) {
      s = printlnStatementParser();
    } else if (jj_2_13(2)) {
      s = procedureDeclarationParser();
    } else if (jj_2_14(2)) {
      s = functionCallStatementParser();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

//Declarations
  final public Declaration declarationParser() throws ParseException, NumberFormatException {
  Identifier id;
  Expression e;
  Token t;
  Declaration d;
    t = jj_consume_token(OBJECTTYPE);
    id = identifierParser();
    jj_consume_token(EQUALSTO);
    e = expressionParser();
    jj_consume_token(SEMICOLON);
    {if (true) return new Declaration(t.image, id, e);}
    throw new Error("Missing return statement in function");
  }

// Initialization
  final public Initialization initializationParser() throws ParseException, NumberFormatException {
  Identifier id;
  Token t;
    t = jj_consume_token(OBJECTTYPE);
    id = identifierParser();
    jj_consume_token(SEMICOLON);
    {if (true) return new Initialization(t.image, id);}
    throw new Error("Missing return statement in function");
  }

//variable assignment
  final public Assignment assignmentParser() throws ParseException, NumberFormatException {
  Identifier id;
  Expression e;
    id = identifierParser();
    jj_consume_token(EQUALSTO);
    e = expressionParser();
    jj_consume_token(SEMICOLON);
    {if (true) return new Assignment(id,e);}
    throw new Error("Missing return statement in function");
  }

//Arrays
  final public ArrayStatement arrayStatementParser() throws ParseException, NumberFormatException {
Identifier id = null;
Token t = null;
Literal l = null;
List<Expression> literalList = null;
    t = jj_consume_token(OBJECTTYPE);
    id = identifierParser();
    jj_consume_token(EQUALSTO);
    jj_consume_token(LSP);
        literalList = new ArrayList<Expression>();
    l = literalParser();
          literalList.add(l);
    label_2:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      l = literalParser();
            literalList.add(l);
    }
    jj_consume_token(RSP);
    jj_consume_token(SEMICOLON);
    {if (true) return new ArrayStatement(t.image, id, literalList);}
    throw new Error("Missing return statement in function");
  }

//Print
  final public PrintStatement printStatementParser() throws ParseException, NumberFormatException {
Expression e = null;
List<Expression> eList = null;
    jj_consume_token(PRINT);
    jj_consume_token(LP);
        eList = new ArrayList<Expression>();
    e = expressionParser();
          eList.add(e);
    label_3:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      e = expressionParser();
            eList.add(e);
    }
    jj_consume_token(RP);
    jj_consume_token(SEMICOLON);
    {if (true) return new PrintStatement(eList);}
    throw new Error("Missing return statement in function");
  }

//Print with next line
  final public PrintLnStatement printlnStatementParser() throws ParseException, NumberFormatException {
  Expression e = null;
  List< Expression > eList = null;
    jj_consume_token(PRINTLN);
    jj_consume_token(LP);
    eList = new ArrayList<Expression>();
    e = expressionParser();
          eList.add(e);
    label_4:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      e = expressionParser();
            eList.add(e);
    }
    jj_consume_token(RP);
    jj_consume_token(SEMICOLON);
     {if (true) return new PrintLnStatement(eList);}
    throw new Error("Missing return statement in function");
  }

//Input Statement
  final public InputStatement inputStatementParser() throws ParseException, NumberFormatException {
  Token type;
  StringLiteral msg;
  Identifier id;
    type = jj_consume_token(OBJECTTYPE);
    id = identifierParser();
    jj_consume_token(EQUALSTO);
    jj_consume_token(INPUT);
    jj_consume_token(LP);
    msg = stringLiteralParser();
    jj_consume_token(RP);
    jj_consume_token(SEMICOLON);
    {if (true) return new InputStatement(type.image, id, msg);}
    throw new Error("Missing return statement in function");
  }

//IF&While
  final public IfExpression ifParser() throws ParseException {
  Expression condition = null;
  Statement thenStatement = new EmptyStatement();
  Statement elseStatement = new EmptyStatement();
    jj_consume_token(IF);
    jj_consume_token(LP);
    condition = expressionParser();
    jj_consume_token(RP);
    jj_consume_token(LGP);
    thenStatement = multiStatement();
    jj_consume_token(RGP);
    if (jj_2_18(2)) {
      jj_consume_token(ELSE);
      jj_consume_token(LGP);
      elseStatement = multiStatement();
      jj_consume_token(RGP);
    } else {
      ;
    }
  {if (true) return new IfExpression(condition, thenStatement, elseStatement);}
    throw new Error("Missing return statement in function");
  }

  final public WhileExpression whileParser() throws ParseException {
  Expression condition = null;
  Statement statement = new EmptyStatement();
    jj_consume_token(WHILE);
    jj_consume_token(LP);
    condition = expressionParser();
    jj_consume_token(RP);
    jj_consume_token(LGP);
    statement = multiStatement();
    jj_consume_token(RGP);
  {if (true) return new WhileExpression(condition, statement);}
    throw new Error("Missing return statement in function");
  }

//Foreach Expression 
  final public ForEachExpression forEachParser() throws ParseException {
Identifier variablename;
Identifier arrayname;
Statement statement = new EmptyStatement();
Token type;
    jj_consume_token(FOREACH);
    jj_consume_token(LP);
    type = jj_consume_token(OBJECTTYPE);
    variablename = identifierParser();
    jj_consume_token(IN);
    arrayname = identifierParser();
    jj_consume_token(RP);
    jj_consume_token(LGP);
    statement = multiStatement();
    jj_consume_token(RGP);
  {if (true) return new ForEachExpression(type.image, variablename, arrayname, statement);}
    throw new Error("Missing return statement in function");
  }

//Return
  final public Return returnParser() throws ParseException, NumberFormatException {
  Expression e;
  Identifier id;
  ReturnInteger r;
    jj_consume_token(RETURN);
    id = identifierParser();
    jj_consume_token(SEMICOLON);
    {if (true) return new Return(id);}
    throw new Error("Missing return statement in function");
  }

//Function & Procedure Declaration
  final public FunctionDeclaration functionDeclarationParser() throws ParseException, NumberFormatException {
  Identifier id;
  FormalParameter fp;
  Statement s;
  Token type;
  Return r;
    type = jj_consume_token(OBJECTTYPE);
    jj_consume_token(FUNCTION);
    id = identifierParser();
    jj_consume_token(LP);
    fp = multiFormalParameter();
    jj_consume_token(RP);
    jj_consume_token(LGP);
    s = multiStatement();
    r = returnParser();
    jj_consume_token(RGP);
    {if (true) return new FunctionDeclaration(type.image, id, fp, s, r);}
    throw new Error("Missing return statement in function");
  }

  final public ProcedureDeclaration procedureDeclarationParser() throws ParseException, NumberFormatException {
  Identifier id;
  FormalParameter fp;
  Statement s;
  Token type;
    type = jj_consume_token(VOID);
    jj_consume_token(FUNCTION);
    id = identifierParser();
    jj_consume_token(LP);
    fp = multiFormalParameter();
    jj_consume_token(RP);
    jj_consume_token(LGP);
    s = multiStatement();
    jj_consume_token(RGP);
    {if (true) return new ProcedureDeclaration(type.image, id, fp, s);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter multiFormalParameter() throws ParseException, NumberFormatException {
  FormalParameter initial= null;
  FormalParameter last =null;
  FormalParameter next =null;
    if (jj_2_20(2)) {
      last = formalParameterParser();
      label_5:
      while (true) {
        if (jj_2_19(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(COMMA);
        next = formalParameterParser();
      }
        if(initial == null)
        {
          initial = last;
        }
        last.next = next;
        last = next;
    } else {
      ;
    }
     {if (true) return initial;}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter formalParameterParser() throws ParseException, NumberFormatException {
  Identifier i ;
  Token type;
    type = jj_consume_token(OBJECTTYPE);
    i = identifierParser();
    {if (true) return new FormalParameter(type.image, i);}
    throw new Error("Missing return statement in function");
  }

//Function calling
  final public FunctionCallExpression functionCallParser() throws ParseException, NumberFormatException {
  ActualParameter ap=null;
  Identifier id;
  Expression e=null;
    id = identifierParser();
    jj_consume_token(LP);
    ap = actualParameterParseMulti();
    jj_consume_token(RP);
    {if (true) return new FunctionCallExpression(id, ap);}
    throw new Error("Missing return statement in function");
  }

  final public ActualParameter actualParameterParseMulti() throws ParseException, NumberFormatException {
  ActualParameter initial = null;
  ActualParameter last = null;
  ActualParameter next = null;
    if (jj_2_22(2)) {
      last = actualParameterParser();
      label_6:
      while (true) {
        if (jj_2_21(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        next = actualParameterParser();
      }
        if(initial == null)
        {
          initial = last;
        }
        last.next = next;
        last= next;
    } else {
      ;
    }
    {if (true) return initial;}
    throw new Error("Missing return statement in function");
  }

  final public ActualParameter actualParameterParser() throws ParseException, NumberFormatException {
  Expression e;
    e = expressionParser();
    {if (true) return new ActualParameter(e);}
    throw new Error("Missing return statement in function");
  }

//Procedures calling
  final public FunctionCallStatement functionCallStatementParser() throws ParseException, NumberFormatException {
  ActualParameter ap = null;
  Identifier id;
    id = identifierParser();
    jj_consume_token(LP);
    ap = actualParameterParseMulti();
    jj_consume_token(RP);
    jj_consume_token(SEMICOLON);
    {if (true) return new FunctionCallStatement(id,ap);}
    throw new Error("Missing return statement in function");
  }

//Variable Declaration
/*
Declaration declarationParser() throws NumberFormatException:
{
  Identifier id;
  Expression e;
  String type;
}
{
  type=typeParser() id=identifierParser() "=" e = expressionParser() ";"
  {
    return new Declaration(type, id, e);
  }
} */






//Arithmetic
  final public Expression expressionParser() throws ParseException, NumberFormatException {
  Expression e;
    e = ArithmeticExpression();
  {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ArithmeticExpression() throws ParseException, NumberFormatException {
        Expression left;
        Expression right;
    left = ArithmeticTerm1();
    label_7:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_24(2)) {
        jj_consume_token(PLUS);
        right = ArithmeticTerm1();
                                            left = new Addition(left,right);
      } else if (jj_2_25(2)) {
        jj_consume_token(MINUS);
        right = ArithmeticTerm1();
                                             left = new Subtraction(left,right);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ArithmeticTerm1() throws ParseException {
        Expression left;
        Expression right;
    left = ArithmeticTerm2();
    label_8:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_8;
      }
      if (jj_2_27(2)) {
        jj_consume_token(MULTIPLY);
        right = ArithmeticTerm2();
                                                left = new Multiplication(left,right);
      } else if (jj_2_28(2)) {
        jj_consume_token(DIVIDE);
        right = ArithmeticTerm2();
                                              left = new Division(left,right);
      } else if (jj_2_29(2)) {
        jj_consume_token(MODULUS);
        right = ArithmeticTerm2();
                                               left = new Modulus(left,right);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ArithmeticTerm2() throws ParseException {
        Expression left = null;
    if (jj_2_30(2)) {
      jj_consume_token(MINUS);
      left = ArithmeticTerm3();
                                         left = new Negative(left);
    } else if (jj_2_31(2)) {
      left = ArithmeticTerm3();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ArithmeticTerm3() throws ParseException {
    Expression left;
        Expression right;
    left = RelationalExpression();
    label_9:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(POWER);
      right = RelationalExpression();
                                             left = new Power(left,right);
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/*Expression ArithmethicTerm4() :
{
Expression e; 
}
{
	(
	  	 <LP> e = ArithmethicExpression() <RP> 	  
	 	| e = functionCallExpressionParser()
		| e = literalParser()
		| e = variableParser()
	)
	{
	  return e;
	}
} */



//Relational
  final public Expression RelationalExpression() throws ParseException {
        Expression left;
        Expression right;
    left = LogicalExpression();
    label_10:
    while (true) {
      if (jj_2_33(2)) {
        ;
      } else {
        break label_10;
      }
      if (jj_2_34(2)) {
        jj_consume_token(LT);
        right = LogicalExpression();
                                           left = new LessThan(left,right);
      } else if (jj_2_35(2)) {
        jj_consume_token(LTE);
        right = LogicalExpression();
                                            left = new LessEqual(left,right);
      } else if (jj_2_36(2)) {
        jj_consume_token(GTE);
        right = LogicalExpression();
                                            left = new GreaterEqual(left,right);
      } else if (jj_2_37(2)) {
        jj_consume_token(GT);
        right = LogicalExpression();
                                           left = new GreaterThan(left,right);
      } else if (jj_2_38(2)) {
        jj_consume_token(EQ);
        right = LogicalExpression();
                                           left = new Equal(left,right);
      } else if (jj_2_39(2)) {
        jj_consume_token(NE);
        right = LogicalExpression();
                                           left = new NotEqual(left,right);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

/*Expression RelationalTerm1(): 
{
Expression e;
}
{
	(
	  	<LP> e = RelationalExpression() <RP>
		| e = ArithmethicExpression()
	 	| e = functionCallExpressionParser()
		| e = literalParser()
		| e = variableParser()
	)
	{
	  return e;
	}
} */




//Logical
  final public Expression LogicalExpression() throws ParseException {
        Expression left;
        Expression right;
    left = LogicalTerm1();
    label_11:
    while (true) {
      if (jj_2_40(2)) {
        ;
      } else {
        break label_11;
      }
      if (jj_2_41(2)) {
        jj_consume_token(OR);
        right = LogicalTerm1();
                                      left = new Or(left,right);
      } else if (jj_2_42(2)) {
        jj_consume_token(XOR);
        right = LogicalTerm1();
                                       left = new Xor(left,right);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression LogicalTerm1() throws ParseException {
        Expression left;
        Expression right;
    left = LogicalTerm2();
    label_12:
    while (true) {
      if (jj_2_43(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(AND);
      right = LogicalTerm2();
                                       left = new And(left,right);
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression LogicalTerm2() throws ParseException {
        Expression left = null;
    if (jj_2_44(2)) {
      jj_consume_token(NOT);
      left = LogicalTerm3();
                                    left = new Not(left);
    } else if (jj_2_45(2)) {
      left = LogicalTerm3();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Expression LogicalTerm3() throws ParseException {
Expression e;
    if (jj_2_46(2)) {
      e = functionCallParser();
    } else if (jj_2_47(2)) {
      e = literalParser();
    } else if (jj_2_48(2)) {
      e = variableParser();
    } else if (jj_2_49(2)) {
      e = arrayParser();
    } else if (jj_2_50(2)) {
      jj_consume_token(LP);
      e = expressionParser();
      jj_consume_token(RP);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//Type Literals
  final public Literal literalParser() throws ParseException, NumberFormatException {
  Literal l;
    if (jj_2_51(2)) {
      l = floatingLiteralParser();
    } else if (jj_2_52(2)) {
      l = integerLiteralParser();
    } else if (jj_2_53(2)) {
      l = booleanLiteralParser();
    } else if (jj_2_54(2)) {
      l = stringLiteralParser();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public IntegerLiteral integerLiteralParser() throws ParseException, NumberFormatException {
  Token t;
    t = jj_consume_token(CONSTANT);
                     {if (true) return new IntegerLiteral(Integer.parseInt(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public BooleanLiteral booleanLiteralParser() throws ParseException, NumberFormatException {
  Token t;
    if (jj_2_55(2)) {
      t = jj_consume_token(TRUE);
               {if (true) return new BooleanLiteral(true);}
    } else if (jj_2_56(2)) {
      t = jj_consume_token(FALSE);
                 {if (true) return new BooleanLiteral(false);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FloatingPointLiteral floatingLiteralParser() throws ParseException, NumberFormatException {
  Token t;
    t = jj_consume_token(FLOAT);
                  {if (true) return new FloatingPointLiteral(Double.parseDouble(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public StringLiteral stringLiteralParser() throws ParseException, NumberFormatException {
  Token t;
  int len;
    t = jj_consume_token(STRING);
     len = t.image.length();
     {if (true) return new StringLiteral(t.image.substring(1,len-1));}
    throw new Error("Missing return statement in function");
  }

  final public Identifier identifierParser() throws ParseException, NumberFormatException {
  Token t;
    t = jj_consume_token(VARIABLENAME);
    {if (true) return new Identifier(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Expression variableParser() throws ParseException, NumberFormatException {
  Identifier id;
    id = identifierParser();
    {if (true) return new Variable(id);}
    throw new Error("Missing return statement in function");
  }

  final public Expression arrayParser() throws ParseException, NumberFormatException {
  Identifier id;
    id = identifierParser();
    {if (true) return new Array(id);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_3_16() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(OBJECTTYPE)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(VARIABLENAME)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(OBJECTTYPE)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(EQUALSTO)) return true;
    if (jj_scan_token(LSP)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(MODULUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(EQUALSTO)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(OBJECTTYPE)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(OBJECTTYPE)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(OBJECTTYPE)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(EQUALSTO)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(LGP)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(OBJECTTYPE)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(GTE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(LTE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public statementsTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[56];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public statements(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public statements(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new statementsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public statements(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new statementsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public statements(statementsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(statementsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 56; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
