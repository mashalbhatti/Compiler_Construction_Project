/* Generated By:JavaCC: Do not edit this line. statementsTokenManager.java */
package statements;
import expression.*;
import supportingpackages.*;
import expression.literal.*;
import expression.arithmetic.*;
import expression.logical.*;
import expression.relational.*;
import statementparser.*;
import java.util.ArrayList;
import java.util.List;

/** Token Manager. */
public class statementsTokenManager implements statementsConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x28d70000000L) != 0L)
         {
            jjmatchedKind = 43;
            return 54;
         }
         if ((active0 & 0x400L) != 0L)
            return 54;
         if ((active0 & 0x2000L) != 0L)
            return 55;
         if ((active0 & 0x10280000000L) != 0L)
         {
            jjmatchedKind = 43;
            return 21;
         }
         if ((active0 & 0x3008000000L) != 0L)
         {
            jjmatchedKind = 43;
            return 16;
         }
         return -1;
      case 1:
         if ((active0 & 0x3000000000L) != 0L)
            return 15;
         if ((active0 & 0x38ff0000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 1;
            }
            return 54;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 54;
         return -1;
      case 2:
         if ((active0 & 0x39ff0000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
            return 54;
         }
         return -1;
      case 3:
         if ((active0 & 0x11fe0000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
            return 54;
         }
         if ((active0 & 0x28010000000L) != 0L)
            return 54;
         return -1;
      case 4:
         if ((active0 & 0x11160000000L) != 0L)
            return 54;
         if ((active0 & 0xe80000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 4;
            }
            return 54;
         }
         return -1;
      case 5:
         if ((active0 & 0xac0000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
            return 54;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 54;
         return -1;
      case 6:
         if ((active0 & 0xa00000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 6;
            return 54;
         }
         if ((active0 & 0xc0000000L) != 0L)
            return 54;
         return -1;
      case 7:
         if ((active0 & 0x200000000L) != 0L)
            return 54;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 7;
            return 54;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L);
      case 34:
         return jjStartNfaWithStates_0(0, 13, 55);
      case 35:
         return jjStopAtPos(0, 17);
      case 37:
         return jjStopAtPos(0, 26);
      case 38:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 39:
         return jjStopAtPos(0, 11);
      case 40:
         return jjStopAtPos(0, 47);
      case 41:
         return jjStopAtPos(0, 48);
      case 42:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 43:
         return jjStopAtPos(0, 21);
      case 44:
         return jjStopAtPos(0, 7);
      case 45:
         return jjStopAtPos(0, 22);
      case 46:
         return jjStopAtPos(0, 9);
      case 47:
         return jjStopAtPos(0, 24);
      case 58:
         return jjStopAtPos(0, 18);
      case 59:
         return jjStopAtPos(0, 19);
      case 60:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 61:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L);
      case 62:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L);
      case 63:
         return jjStopAtPos(0, 20);
      case 64:
         return jjStopAtPos(0, 8);
      case 91:
         return jjStopAtPos(0, 51);
      case 92:
         return jjStopAtPos(0, 15);
      case 93:
         return jjStopAtPos(0, 52);
      case 94:
         return jjStopAtPos(0, 55);
      case 95:
         return jjStartNfaWithStates_0(0, 10, 54);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10280000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3008000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x860000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 123:
         return jjStopAtPos(0, 49);
      case 124:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 125:
         return jjStopAtPos(0, 50);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 42:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 61:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 54);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20080000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8860000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 124:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20160000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000000L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 54);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 54);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1400000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 54);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0x240000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 54);
         break;
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 54);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 54);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1000000L, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  break;
               case 54:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  break;
               case 55:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  else if (curChar == 34)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddStates(3, 7);
                  }
                  else if ((0x4006c3800000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAddStates(8, 10);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(41, 42);
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 36)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(11, 13);
                  }
                  break;
               case 16:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  break;
               case 21:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xffffffefffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xffffffefffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 7);
                  break;
               case 9:
                  if (curChar != 36)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 37:
                  if (curChar != 48)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddStates(0, 2);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddStates(0, 2);
                  break;
               case 40:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 34 && kind > 45)
                     kind = 45;
                  break;
               case 43:
                  if ((0x4006c3800000000L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 44:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(3, 7);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 48:
                  if (curChar == 48)
                     jjCheckNAddStates(8, 10);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(50, 52);
                  break;
               case 50:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(18, 20);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddStates(18, 20);
                  break;
               case 52:
                  if (curChar != 48)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(50, 52);
                  break;
               case 53:
                  if (curChar != 48)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 54:
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 55:
               case 41:
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if ((0x80000001L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(11, 13);
                  break;
               case 6:
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  jjCheckNAddTwoStates(8, 7);
                  break;
               case 11:
                  if (curChar == 114 && kind > 38)
                     kind = 38;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 116 && kind > 38)
                     kind = 38;
                  break;
               case 19:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 103 && kind > 38)
                     kind = 38;
                  break;
               case 24:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 110 && kind > 38)
                     kind = 38;
                  break;
               case 30:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 43:
                  if ((0x80000001L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 46)
                     kind = 46;
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(11, 13);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(8, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   37, 38, 39, 45, 46, 47, 48, 49, 46, 48, 49, 1, 2, 4, 46, 47, 
   48, 49, 50, 51, 52, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\54", "\100", "\56", "\137", "\47", 
"\174", "\42", "\46", "\134", "\75", "\43", "\72", "\73", "\77", "\53", "\55", "\52", 
"\57", "\52\52", "\45", "\151\146", "\145\154\163\145", "\160\162\151\156\164", 
"\160\162\151\156\164\154\156", "\146\157\162\145\141\143\150", "\167\150\151\154\145", 
"\146\165\156\143\164\151\157\156", "\162\145\164\165\162\156", "\160\162\157\143\145\144\165\162\145", 
"\151\156\160\165\164", "\151\156", null, "\164\162\165\145", "\146\141\154\163\145", 
"\166\157\151\144", null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", 
"\46\46", "\174\174", "\136", "\41", "\76", "\74", "\75\75", "\74\75", "\76\75", 
"\41\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static final long[] jjtoSpecial = {
   0x60L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[54];
private final int[] jjstateSet = new int[108];
protected char curChar;
/** Constructor. */
public statementsTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public statementsTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 54; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
